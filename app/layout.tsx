"use client"
import * as React from 'react';
import { Inter } from "next/font/google";
import { ThemeProvider, styled } from '@mui/material/styles';
import Footer from '@/components/layout/footer';
import { Backdrop, useMediaQuery } from '@mui/material';
import Header from '@/components/layout/header';
import { Provider, useSelector } from 'react-redux';
import store from '@/components/store/Store';
import BlockUISelectors from '@/components/store/BlockUI/BlockUISelector';
import theme from '@/lib/theme';
import CssBaseline from '@mui/material/CssBaseline';
import Template from '@/components/store/DialogAlert/STcustom/STcustomTemplate';
import { I18n } from '@/lib/utils';
const inter = Inter({ subsets: ["latin"] });

export const ProviderLayout = React.createContext(null);

const Main = styled('main', { shouldForwardProp: (prop) => prop !== 'open' })<{
  open?: boolean;
}>(({ theme }) => ({
  width: "100%",
  minHeight: "calc(100vh - 165px)",
  marginTop: "5%",
  transition: theme.transitions.create('margin', {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.leavingScreen,
  }),
}));

// export const metadata: Metadata = {
//   title: "PTT PIC",
//   description: "Generated by create next app",
// };

// I18n.InitialI18next();
export default function RootLayout({
children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const Layout630 = useMediaQuery('(min-width:630px)');
  const Layout900 = useMediaQuery('(min-width:900px)');
  const [open, setOpen] = React.useState(false);

  const [IsMenuOpen, setIsMenuOpen] = React.useState(true)
  const [IsOverMouse, setIsOverMouse] = React.useState(false)
  const [arrMenuOpen, setarrMenuOpen] = React.useState([])


  const handleClickMenuOpen = React.useCallback((menuID: number) => {
    const selectedIndex = arrMenuOpen.indexOf(menuID);
    let newSelected = [];

    if (selectedIndex === -1) {
      newSelected = newSelected.concat(arrMenuOpen, menuID);
    } else if (selectedIndex === 0) {
      newSelected = newSelected.concat(arrMenuOpen.slice(1));
    } else if (selectedIndex === arrMenuOpen.length - 1) {
      newSelected = newSelected.concat(arrMenuOpen.slice(0, -1));
    } else if (selectedIndex > 0) {
      newSelected = newSelected.concat(
        arrMenuOpen.slice(0, selectedIndex),
        arrMenuOpen.slice(selectedIndex + 1),
      );
    }
    setarrMenuOpen(newSelected);
  }, [arrMenuOpen]);

  const objProvider = React.useMemo(() => (
    {
      IsMenuOpen,
      setIsMenuOpen,
      IsOverMouse,
      setIsOverMouse,
      arrMenuOpen,
      handleClickMenuOpen,
      isMouseOver: false,
      Layout630,
      Layout900,
      open,
      setOpen,
    }
  ), [IsMenuOpen, IsOverMouse, Layout630, Layout900, arrMenuOpen, handleClickMenuOpen, open]);

  return (
    <html lang="en" className="html font-normal">
      <body className={inter.className}>
        <div id="root"></div>
        <script type="module" src="./index.ts"></script>
        <React.Fragment>
          <Provider store={store}>
            <ThemeProvider theme={theme}>
              <CssBaseline />
              <Template />
              {/* <AuthSession /> */}
              <ProviderLayout.Provider value={objProvider}>
                <Header />
                  <Main open={open}>
                    {children}
                  </Main>
                <Footer />
              </ProviderLayout.Provider>
              <BackdropBlockUI />
            </ThemeProvider>
          </Provider>
        </React.Fragment>
      </body>
    </html>
  );
}

export const BackdropBlockUI = () => {
  const IsOpen = useSelector(BlockUISelectors.IsOpen);
  return (
    <Backdrop
      sx={{
        zIndex: 300,
        backgroundColor: "rgba(0, 0, 0, 0.21)",
      }}
      open={IsOpen}
      key={"Backdrop"}
      id="Backdrop"
    >
      <div id="page">
        <div id="container">
          <div className="loader">
            <div className="dot-ui dot-1"></div>
            <div className="dot-ui dot-2"></div>
            <div className="dot-ui dot-3"></div>
            <div className="dot-ui dot-4"></div>
            <div className="dot-ui dot-5"></div>
          </div>
          <div className="loading-process">Loading ...</div>
        </div>
      </div>
    </Backdrop>
  );
};